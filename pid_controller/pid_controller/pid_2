import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from rclpy.callback_groups import ReentrantCallbackGroup
from geometry_msgs.msg import PoseStamped
from vesc_msgs.msg import VescStateStamped, VescSetCommand
from simple_pid import PID
from some_action_package.msg import DockingAction, DockingGoal

class VESCPIDController(Node):
    def __init__(self):
        super().__init__("vesc_pid_controller")
        self.declare_parameters(namespace="", parameters=[
            ("kp", 1.0), ("ki", 0.0), ("kd", 0.0), ("target_x", 0.0), ("target_y", 0.0)
        ])
        self.pid_x = PID(self.get_parameter("kp").value, self.get_parameter("ki").value, self.get_parameter("kd").value, setpoint=self.get_parameter("target_x").value)
        self.pid_y = PID(self.get_parameter("kp").value, self.get_parameter("ki").value, self.get_parameter("kd").value, setpoint=self.get_parameter("target_y").value)
        
        self.vesc_command_publisher = self.create_publisher(VescSetCommand, "commands/motor/speed", 10)
        self.pose_subscription = self.create_subscription(PoseStamped, "optitrack/rigid_body_0", self.pose_callback, 10)
        self.vesc_state_subscription = self.create_subscription(VescStateStamped, "vesc/core", self.vesc_state_callback, 10)
        self.docking_action_client = ActionClient(self, DockingAction, "docking_action_server")

    def pose_callback(self, msg):
        current_x = msg.pose.position.x
        current_y = msg.pose.position.y
        speed_command = self.pid_x(current_x)
        self.send_motor_command(speed_command)
        self.get_logger().info(f"Pose updated. Current X: {current_x}, Command Speed: {speed_command}")

    def vesc_state_callback(self, msg):
        self.get_logger().info(f"VESC state updated. Current speed: {msg.state.speed}")

    def send_motor_command(self, speed):
        command = VescSetCommand(command=speed)
        self.vesc_command_publisher.publish(command)
        self.get_logger().info(f"Sent motor command: {speed}")

    def send_docking_command(self):
        goal = DockingGoal(target_position=self.get_parameter("target_x").value)
        self.docking_action_client.send_goal_async(goal, feedback_callback=self.docking_feedback)

    def docking_feedback(self, feedback_msg):
        # Process feedback here, potentially adjust PID targets
        pass

def main(args=None):
    rclpy.init(args=args)
    vesc_controller = VESCPIDController()
    rclpy.spin(vesc_controller)
    vesc_controller.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()
